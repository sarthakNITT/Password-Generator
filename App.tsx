// https://www.npmjs.com/package/yup - this package we have installed for this project and this the link for it. go to this website to learn it and explore it mores
// https://chatgpt.com/c/aa8951de-3be7-4a06-8177-3d6124c640f1 link to understand yup package and this code
// https://formik.org/docs/overview read whole thing specially Gist, validate in guide, validation, validationSchema, react native in guides
import { SafeAreaView, ScrollView, StyleSheet, Text, TextInput, Touchable, TouchableOpacity, View } from 'react-native'
import React, { useState } from 'react'

import BouncyCheckbox from "react-native-bouncy-checkbox" ; // bouncy check box package we are importing

// Form validation
// import ( object string, number, date, InferType } from 'yup' - if you want to import specific items use this syntax 
import * as Yup from 'yup' // to import the packages this is the syntax
import { Formik } from 'formik';// formik package we are importing

const PasswordSchema = Yup.object().shape({  // we have made a constant function which has Yup package, as it has many objects we have called the objects and in that we can define or desing shape of object validating to string and all of that
  // here we are defining a property
  passwordLength: Yup.number() // here we have to validate number as passwordLength so this if you want to validate string - Yup.string()
  .min(4 , 'Should be min of 4 characters')// you can also give order like you want maximum or minimum of number and if it is not there you can give the costumize error for that
  .max(16 , 'Should be max of 16 characters')
  .required('Length is required') // compulsory field to fill if you haven't folled this cutomized error of lingth is required will come
}) 

export default function App() {
// const is an array variable which has useState where you can put some default thing which goes into the variable as value of it as if you want number put those number same for string true false anything, right now we are giving it as an empty string
  const [password, setPassword] = useState('') // the first thing you put in [] is the variable and second value is method which is going to update the first value and inside the useState we give the initial value of the const || you never ever update the first value directly you use the second value or second fucntion to update the first value
  const [isPassGenerated, setIsPassGenerated] = useState(false)
  const [lowerCase, setLowerCasel] = useState (true)
  const [upperCase, setupperCasel] = useState (false)
  const [numbers, setNumbers] = useState (false) 
  const [symbols, setSymbols] = useState (false)

   const generatedPasswordString = (passwordLength: number) => {
    let characterList = '1';
    const upperCaseChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' ;
    const lowerCaseChars = 'abcdefghijklmnopqrstuvwxyz';
    const digitChars = '0123456789' ;
    const specialChars = '!@#$%^&*()_+';

    if (upperCase) {
      characterList += upperCaseChars
    }
    if (lowerCase) {
      characterList += lowerCaseChars
    }
    if (numbers) {
      characterList += digitChars
    }
    if (symbols) {
      characterList += specialChars
    }
    const passwordResult = createPassword(characterList, passwordLength)
    setPassword(passwordResult)
    setIsPassGenerated(true)
  }
  const createPassword = (characters: string, passwordLength: number) => {
    let result = '' // result as a variable which we will be returning to user || giving now a empty value
    for (let i = 0; i < passwordLength; i++) {
      const characterIndex = Math.round(Math.random() * characters.length) // Math.random() Generates a random floating-point number between 0 (inclusive) and 1 (exclusive), meaning the result will be in the range [0, 1). || Math.random() * characters.length Multiplies the random number generated by Math.random() with the length of the characters string. || Math.round()  Rounds the result to the nearest whole number.
      //  made a const which has a library of generating any random number multiply by character length which means characters which we are providing in password that length
      result += characters.charAt(characterIndex) // charAt(): This is a method in JavaScript that returns the character at the specified index within a string.
      // this means in a characters string it gets every perticular single character and we store it into the result || it will overwrite values everytime so we did += which means every new value of result adds up to older or previous value 
    }// for loop
    return result
  }
  
  const resetPasswordState = () => {
    setPassword('')
    setIsPassGenerated(false)
    setLowerCasel(true)
    setupperCasel(false)
    setNumbers(false)
    setSymbols(false)
  }
  
  return (
    // keyboardShouldPersistTaps is a property which says keyboard will pop up after the tap and won't close directly. you can read it completely by hovering on the tag
    // in line 82 we havent code formik just go tu formik docs getting started page in Gist just copy and paste the formik code
    <ScrollView keyboardShouldPersistTaps="handled"> 
      <SafeAreaView style={styles.appContainer}>
        <View style={styles.formContainer}>
          <Text style={styles.title}>Password Generator</Text>
          <Formik
       initialValues={{ passwordLength: '' }}
       // in normal code copied from website here it is validate but we have already validate in our code so here we are using validationSchema 
       validationSchema={PasswordSchema} // this means the validation thing we have coded in passwordSchema
       onSubmit={ values => {
        console.log(values);
        generatedPasswordString(+values.passwordLength) // this is a shortcut to write that values.passwordLength is a number main syntax is (number(values.passwordLength))
       }}
     >
       {({
         values,
         errors,
         touched,
         isValid,
         handleChange,
         handleSubmit,
         handleReset
         /* and other goodies */
       }) => (
        <>
        <View style={styles.inputWrapper}>
          <View style={styles.inputColumn}>
            <Text style={styles.heading}>Password Length</Text>
            {touched.passwordLength && errors.passwordLength && (
              <Text style={styles.errorText}>
                {errors.passwordLength}
              </Text>
            )}
          </View>
          <TextInput 
            style={styles.inputStyle}
            value={values.passwordLength}
            onChangeText={handleChange('passwordLength')}
            placeholder="Ex. 8"
            keyboardType='numeric'
            />
        </View>
        <View style={styles.inputWrapper}>
          <Text style={styles.heading}>Include lowercase</Text>
          <BouncyCheckbox
          disableBuiltInState
          isChecked={lowerCase}
          onPress={() => setLowerCasel(!lowerCase)}
          fillColor="#29AB87"
          />
        </View>
        <View style={styles.inputWrapper}>
        <Text style={styles.heading}>Include uppercase</Text>
          <BouncyCheckbox
          disableBuiltInState
          isChecked={upperCase}
          onPress={() => setupperCasel(!upperCase)}
          fillColor="#FED85D"
          />
        </View>
        <View style={styles.inputWrapper}>
        <Text style={styles.heading}>Include numbers</Text>
          <BouncyCheckbox
          disableBuiltInState
          isChecked={numbers}
          onPress={() => setNumbers(!numbers)}
          fillColor="#C9A0DC"
          />
        </View>
        <View style={styles.inputWrapper}>
        <Text style={styles.heading}>Include symbols</Text>
          <BouncyCheckbox
          disableBuiltInState
          isChecked={symbols}
          onPress={() => setSymbols(!symbols)}
          fillColor="#FC80A5"
          />
        </View>
        <View style={styles.formActions}>
          <TouchableOpacity
          disabled={!isValid}
          style={styles.primaryBtn}
          onPress={ () => {
            handleSubmit();
          }}
          >
            <Text style={styles.primaryBtnTxt}>Generate Password</Text>
          </TouchableOpacity>
          <TouchableOpacity
          style={styles.secondaryBtn}
          onPress={ () => {
            handleReset();
            resetPasswordState()
          }}
          >
            <Text style={styles.secondaryBtnTxt}>Reset</Text>
          </TouchableOpacity>
        </View>
        </>
       )}
          </Formik>
        </View>
        {isPassGenerated ? (
          <View style={[styles.card , styles.cardElevated]}>
            <Text style={styles.subTitle}>Result:</Text>
            <Text style={styles.description}>Long press to copy</Text>
            <Text selectable={true} style={styles.generatedPassword}>{password}</Text>
          </View>
        ) : null}
      </SafeAreaView>
    </ScrollView>
  )
}

// whole style sheet is copied from the github reposetory
const styles = StyleSheet.create({
  appContainer: {
    flex: 1,
  },
  formContainer: {
    margin: 8,
    padding: 8,
  },
  title: {
    fontSize: 32,
    fontWeight: '600',
    marginBottom: 15,
  },
  subTitle: {
    fontSize: 26,
    fontWeight: '600',
    marginBottom: 2,
  },
  description: {
    color: '#758283',
    marginBottom: 8,
  },
  heading: {
    fontSize: 15,
  },
  inputWrapper: {
    marginBottom: 15,
    alignItems: 'center',
    justifyContent: 'space-between',
    flexDirection: 'row',
  },
  inputColumn: {
    flexDirection: 'column',
  },
  inputStyle: {
    padding: 8,
    width: '30%',
    borderWidth: 1,
    borderRadius: 4,
    borderColor: '#16213e',
  },
  errorText: {
    fontSize: 12,
    color: '#ff0d10',
  },
  formActions: {
    flexDirection: 'row',
    justifyContent: 'center',
  },
  primaryBtn: {
    width: 120,
    padding: 10,
    borderRadius: 8,
    marginHorizontal: 8,
    backgroundColor: '#5DA3FA',
  },
  primaryBtnTxt: {
    color: '#fff',
    textAlign: 'center',
    fontWeight: '700',
  },
  secondaryBtn: {
    width: 120,
    padding: 10,
    borderRadius: 8,
    marginHorizontal: 8,
    backgroundColor: '#CAD5E2',
  },
  secondaryBtnTxt: {
    textAlign: 'center',
  },
  card: {
    padding: 12,
    borderRadius: 6,
    marginHorizontal: 12,
  },
  cardElevated: {
    backgroundColor: '#ffffff',
    elevation: 1,
    shadowOffset: {
      width: 1,
      height: 1,
    },
    shadowColor: '#333',
    shadowOpacity: 0.2,
    shadowRadius: 2,
  },
  generatedPassword: {
    fontSize: 22,
    textAlign: 'center',
    marginBottom: 12,
    color:'#000'
  },
});

// These are different objects in Yup
// name: string(). required(),
// age: number () •required() •positive().integer(),
// email: string() -email(),
// website: string().url().nullable(),
// createdon: date() •default(() => new Date()),